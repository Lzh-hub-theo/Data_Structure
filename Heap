#include <iostream>

using namespace std;

//child=parent*2+1+2
//parent=(child-1)/2
//二叉堆还没删除元素的时候，totalLen=len

void upAdjust(int heap[], int len, bool isMaxHeap) {
	int child = len - 1;
	int parent = (child - 1) / 2;
	int temp = heap[child];

	if (isMaxHeap) {
		while (parent >= 0 && temp > heap[parent]) {
			heap[child] = heap[parent];
			child = parent;
			parent = (parent - 1) / 2;
		}
	}
	else {
		while (parent >= 0 && temp < heap[parent]) {
			heap[child] = heap[parent];
			child = parent;
			parent = (parent - 1) / 2;
		}
	}
	heap[child] = temp;
}

void downAdjust(int target,int heap[], int len, bool isMaxHeap) {
	int parent = target;
	int child = parent * 2 + 1;
	int temp = heap[parent];

	if (isMaxHeap) {
		while (child < len) {
			if (child + 1 < len && heap[child + 1] > heap[child]) {
				child++;
			}
			if (heap[child] > temp) {
				heap[parent] = heap[child];
				parent = child;
				child = child * 2 + 1;
			}
			else {
				break;
			}
		}
	}
	else {
		while (child < len) {
			if (child + 1 < len && heap[child + 1] < heap[child]) {
				child++;
			}
			if (heap[child] < temp) {
				heap[parent] = heap[child];
				parent = child;
				child = child * 2 + 1;
			}
			else {
				break;
			}
		}
	}
	heap[parent] = temp;
}

void Add(int heap[],int *len,int data,bool isMaxHeap) {
	heap[*len++] = data;
	upAdjust(heap, *len, isMaxHeap);
}

int Delete(int heap[], int* len, bool isMaxHeap) {
	int deletedElement = heap[0];
	heap[0] = heap[*len - 1];
	heap[*len - 1] = deletedElement;
	(*len)--;

	downAdjust(0, heap, *len, isMaxHeap);

	return deletedElement;
}

void BuildHeap(int heap[],int len,bool isMaxHeap) {
	for (int i = (len - 1 - 1) / 2; i >= 0; i--) {
		downAdjust(i, heap, len, isMaxHeap);
	}
}

//heap 待调整的堆
//*len 二叉堆的有效长度
//isMaxHeap 是否创建最大堆
void heapSort(int heap[], int* len, bool isMaxHeap) {
	BuildHeap(heap, *len, isMaxHeap);
	while (*len) {
		Delete(heap, len, isMaxHeap);
	}
}

int main() {
	int heap[10] = { 1,3,2,6,5,7,8,9,10,0 };
	int totalLen = 10; int len = 10;
	heapSort(heap, &len, true);

	for (int i = 0; i < totalLen; i++) {
		cout << heap[i] << ' ';
	}
	return 0;
}
